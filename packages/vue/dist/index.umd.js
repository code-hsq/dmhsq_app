!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("vue")):"function"==typeof define&&define.amd?define(["exports","vue"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).root={},e.Vue)}(this,(function(e,t){"use strict";var o;e.QR_Status=void 0,(o=e.QR_Status||(e.QR_Status={}))[o.NO_SCAN=1]="NO_SCAN",o[o.HAD_SCAN=2]="HAD_SCAN",o[o.HAD_LOGIN=3]="HAD_LOGIN";e.useQrCodeLogin=o=>{(()=>{if(!o.appId)throw new Error("appId is required");if(!o.token)throw new Error("token is required");if(!o.baseUrl)throw new Error("baseUrl is required")})();const r=t.reactive({loading:!1,success:!0,url:"",key:"",loginSuccess:!1,token:"",userInfo:{},status:0,qrCodeTimeOut:!1,expiration:0}),s=t.ref(0),a=t.ref(null),u=(e=>{const{appId:t,token:o,baseUrl:r}=e;return{url:r+"/appuser/qrcode",method:"GET",headers:{"x-app-id":t,"x-app-token":o,responseType:"blob"}}})(o),n=(e=>{const{appId:t,token:o,baseUrl:r}=e;return{url:r+"/appuser/queryCode",method:"POST",headers:{"x-app-id":t,"x-app-token":o}}})(o),d=()=>{a.value&&(clearInterval(a.value),a.value=null)},c=async()=>{r.qrCodeTimeOut=!1,d();a.value=setInterval((()=>{s.value+=3,(async()=>{try{const t=await fetch(n.url,{method:n.method,headers:{...n.headers,"content-type":"application/json"},mode:"cors",body:JSON.stringify({key:r.key})}),o=await t.json();o.data.status===e.QR_Status.HAD_LOGIN?(d(),r.status=o.data.status,r.userInfo=o.data.userInfo,r.loginSuccess=!0,r.token=o.data.token,r.expiration=o.data.expiration):r.status=o.data.status}catch(e){console.error("Error querying QR code status:",e),r.success=!1}})(),s.value>=60&&(d(),r.loginSuccess=!1,r.qrCodeTimeOut=!0)}),3e3)};return{loading:t.computed((()=>r.loading)),url:t.computed((()=>r.url)),success:t.computed((()=>r.success)),key:t.computed((()=>r.key)),token:t.computed((()=>r.token)),loginSuccess:t.computed((()=>r.loginSuccess)),userInfo:t.computed((()=>r.userInfo)),status:t.computed((()=>r.status)),qrCodeTimeOut:t.computed((()=>r.qrCodeTimeOut)),expiration:t.computed((()=>r.expiration)),getQrCode:async()=>{try{d(),r.loading=!0;const e=await fetch(u.url,{method:u.method,headers:{...u.headers},mode:"cors"}),t=e.headers.get("x-app-key")||"",o=await e.blob(),s=window.URL.createObjectURL(new Blob([o]));r.url=s,r.key=t,r.loading=!1,r.success=!0,r.status=1,c()}catch(e){throw r.loading=!1,r.success=!1,console.error("Error getting QR code:",e),e}},cleanup:()=>{d(),r.url&&URL.revokeObjectURL(r.url)}}}}));
//# sourceMappingURL=index.umd.js.map
